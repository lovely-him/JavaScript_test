
let arr1 = ["A", true, 2];

/*==================== push ==========================*/
console.log(arr1); // 查看数组内容，

// 将新元素追加到数组的末尾，并返回数组的新长度。 （官方解释，鼠标放上去查看）
let arr1_0 = arr1.push("new value"); // 作用：在数组末尾添加一个新元素，同时返回该数组新的长度
let arr1_1 = arr1.push("new value1","new value2"); // 这个函数还可以同时添加多个元素，依次添加

console.log(arr1); // 查看数组内容，和上面做比较，
console.log(arr1_0); // 返回 4 = 3 + 1
console.log(arr1_1); // 返回 6 = 4 + 2


/*==================== pop ==========================*/
console.log(arr1); // 查看数组内容，

// 从数组中删除最后一个元素并返回它。如果数组为空，则返回undefined，并且不修改数组。（官方解释，鼠标放上去查看）
let arr1_2 = arr1.pop(); 

console.log(arr1); // 查看数组内容，和上面做比较，
console.log(arr1_2); // 返回 "new value2" ,也就是最后一个元素的内容


/*==================== unshift ==========================*/
console.log(arr1); // 查看数组内容，

// 在数组开始处插入新元素，并返回数组的新长度。（官方解释）
let arr1_3 = arr1.unshift("11","22");  // 同样可以同时添加多个元素

console.log(arr1); // 查看数组内容，和上面做比较，
console.log(arr1_3); // 返回 7 = 5 + 2


/*==================== shift ==========================*/
console.log(arr1); // 查看数组内容，

// 从数组中删除第一个元素并返回它。如果数组为空，则返回undefined，并且不修改数组。（官方解释）
let arr1_4 = arr1.shift();  // 同样可以同时添加多个元素

console.log(arr1); // 查看数组内容，和上面做比较，
console.log(arr1_4); // 返回 "11" , 也就是弹出的第一个元素


/*==================== concat ==========================*/
let arr2 = ["B", false, 3];
console.log(arr1); // 查看数组内容，
console.log(arr2); // 

// 组合两个或多个数组。此方法返回一个新数组，而不修改任何现有数组。（官方解释）
let arr1_5 = arr1.concat(arr2);  // 添加到数组末尾的其他数组和/或项。
let arr1_6 = arr1.concat([1,2,3],[4,5]);  // 同上，是可以输入多个参数，也是依次排列在后面

console.log(arr1); // 查看数组内容，和上面做比较，
console.log(arr2); // 可以发现2个数组都没有变化，只有返回值是组合值，那为什么这个方法是数组的内置方法……，这样容易让人误解啊
console.log(arr1_5); // 组合的数组
console.log(arr1_6);